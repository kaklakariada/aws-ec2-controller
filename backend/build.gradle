plugins {
    id 'java'
    id 'jacoco'
    id "com.diffplug.eclipse.apt" version "3.44.0"
    id "com.github.ben-manes.versions" version "0.51.0"
    id "org.sonarqube" version "5.0.0.4638"
}

repositories {
    mavenCentral()
}

version = '0.0.1'

ext {
    micronautVersion = '4.4.2'
    micronautAwsVersion = '4.5.0'
    awsSdkVersion = '1.12.718'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    modularity.inferModulePath = false
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    // warning: No processor claimed any of these annotations
    options.compilerArgs << '-Xlint:all,-processing' 
    options.compilerArgs << '-Werror'
}

dependencies {
    annotationProcessor platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
   	annotationProcessor "io.micronaut:micronaut-validation:3.10.4"

    implementation platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation:3.10.4"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut.crac:micronaut-crac"
    implementation "io.micronaut:micronaut-jackson-databind"

    implementation "io.micronaut.aws:micronaut-function-aws-api-proxy:$micronautAwsVersion"
    implementation "io.micronaut.aws:micronaut-function-aws"
    implementation "com.amazonaws:aws-java-sdk-ec2:$awsSdkVersion"
    implementation "com.amazonaws:aws-java-sdk-dynamodb:$awsSdkVersion"
    implementation "com.amazonaws:aws-java-sdk-route53:$awsSdkVersion"
    implementation "com.amazonaws:aws-java-sdk-pricing:$awsSdkVersion"
    
    implementation 'ch.qos.logback:logback-classic:1.5.6'
    implementation 'io.symphonia:lambda-logging:1.0.3:no-config'
    
    testAnnotationProcessor platform("io.micronaut.platform:micronaut-platform:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.2"
    testImplementation "io.micronaut.test:micronaut-test-junit5:4.3.0"
    testImplementation "org.mockito:mockito-core:5.11.0"
    testRuntimeOnly "com.fasterxml.jackson.module:jackson-module-afterburner:2.17.1"
}

test {
    useJUnitPlatform()
}

task runServer(type: JavaExec) {
  doFirst {
    def configFile = file("local-server-env.properties")
    assert configFile.exists() : "Please create config file ${configFile}"
    def environmentProperties = new Properties()
    configFile.withInputStream { environmentProperties.load(it) }
    environment environmentProperties
  }

  classpath sourceSets.main.runtimeClasspath
  jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dmicronaut.environments=local')
  mainClass = "org.itsallcode.aws.ec2.Application"
}

task buildLambdaZip(type: Zip) {
    group = 'build'
    archiveFileName = 'backend.zip'
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

build.dependsOn buildLambdaZip

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

rootProject.tasks["sonarqube"].dependsOn(tasks["jacocoTestReport"])

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "kaklakariada-github"
    }
}
