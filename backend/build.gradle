plugins {
    id 'java'
    id "com.diffplug.eclipse.apt" version "3.30.0"
}

repositories {
    mavenCentral()
}

sourceCompatibility = 11
targetCompatibility = 11
compileJava.options.compilerArgs += '-parameters'
compileTestJava.options.compilerArgs += '-parameters'

version = '0.0.1'

ext {
    micronautVersion = '3.0.2'
    micronautAwsVersion = '2.8.0'
    awsSdkVersion = '1.12.21'
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
   	annotationProcessor "io.micronaut:micronaut-validation"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    
    implementation "io.micronaut.aws:micronaut-function-aws-api-proxy:$micronautAwsVersion"
    implementation "com.amazonaws:aws-java-sdk-ec2:$awsSdkVersion"
    implementation "com.amazonaws:aws-java-sdk-dynamodb:$awsSdkVersion"
    implementation "com.amazonaws:aws-java-sdk-route53:$awsSdkVersion"
    implementation "com.amazonaws:aws-java-sdk-pricing:$awsSdkVersion"
    
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    implementation 'io.symphonia:lambda-logging:1.0.3:no-config'
    
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.mockito:mockito-core:3.11.2"
    testRuntimeOnly "com.fasterxml.jackson.module:jackson-module-afterburner:2.12.4"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test {
    useJUnitPlatform()
}

task runServer(type: JavaExec) {
  doFirst {
    def configFile = file("local-server-env.properties")
    assert configFile.exists() : "Please create config file ${configFile}"
    def environmentProperties = new Properties()
    configFile.withInputStream { environmentProperties.load(it) }
    environment environmentProperties
  }

  classpath sourceSets.main.runtimeClasspath
  jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dmicronaut.environments=local')
  mainClass = "org.itsallcode.aws.ec2.Application"
}

task buildLambdaZip(type: Zip) {
    group = 'build'
    archiveFileName = 'backend.zip'
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

build.dependsOn buildLambdaZip

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
